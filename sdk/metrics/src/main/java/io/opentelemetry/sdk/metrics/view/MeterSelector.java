/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */

package io.opentelemetry.sdk.metrics.view;

import com.google.auto.value.AutoValue;
import java.util.Objects;
import java.util.regex.Pattern;
import javax.annotation.concurrent.Immutable;

/**
 * Provides means for selecting one or more Meters. Used for selecting instruments when constructing
 * views.
 */
@AutoValue
@Immutable
public abstract class MeterSelector {
  private static final Pattern MATCH_ALL = Pattern.compile(".*");

  /**
   * Returns a new {@link Builder} for {@link InstrumentSelector}.
   *
   * @return a new {@link Builder} for {@link InstrumentSelector}.
   */
  public static Builder builder() {
    return new AutoValue_MeterSelector.Builder()
        .setNamePattern(MATCH_ALL)
        .setVersionPattern(MATCH_ALL)
        .setSchemaUrlPattern(MATCH_ALL);
  }

  /**
   * Returns the {@link Pattern} generated by the provided {@code regex} in the {@link Builder}, or
   * {@code Pattern.compile(".*")} if none was specified.
   */
  public abstract Pattern getNamePattern();

  public abstract Pattern getVersionPattern();

  public abstract Pattern getSchemaUrlPattern();

  /** Builder for {@link InstrumentSelector} instances. */
  @AutoValue.Builder
  public abstract static class Builder {

    abstract Builder setNamePattern(Pattern pattern);
    /** Sets a specifier for selecting Instruments by name. */
    public final Builder setName(String name) {
      return setNamePattern(exactPattern(Objects.requireNonNull(name, "name")));
    }

    abstract Builder setVersionPattern(Pattern pattern);
    /** Sets a specifier for selecting Meters by version. */
    public final Builder setVersion(String version) {
      return setVersionPattern(exactPattern(Objects.requireNonNull(version, "version")));
    }

    abstract Builder setSchemaUrlPattern(Pattern pattern);
    /** Sets a specifier for selecting Instruments by name. */
    public final Builder setSchemaUrl(String url) {
      return setSchemaUrlPattern(exactPattern(Objects.requireNonNull(url, "url")));
    }

    /** Returns an InstrumentSelector instance with the content of this builder. */
    public abstract MeterSelector build();

    private static Pattern exactPattern(String value) {
      return Pattern.compile(Pattern.quote(value));
    }
  }
}
